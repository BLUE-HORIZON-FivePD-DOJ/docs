---
openapi: 3.0.1
info:
  title: Payroll API
  description: A full flagged payroll api provided by Teal
  version: 1.0.0
servers:
  - url: https://api.sandbox.goteal.co
    description: Sandbox server for experiments
  - url: https://api.goteal.co/v1
    description: Production server
security:
- ApiKeyAuth: []
- bearerAuth: []
paths:
  "/users":
    post:
      summary: Creates a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/User"
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreatedUser"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
    get:
      summary: List all users.
      parameters:
        - name: orederd_by
          in: query
          description: The field of the user to order by
          required: false
          schema:
            type: string
            enum: [name, email, created_at]
            default: created_at
            example: name
        - name: offset
          in: query
          description: The offset to start at
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 0
        - name: limit
          in: query
          description: The number of items to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    "$ref": "#/components/schemas/Paginatioin"
                  users:
                    type: array
                    items:
                      "$ref": "#/components/schemas/CreatedUser"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
  "/users/{user_id}":
    get:
      summary: Creates a user.
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreatedUser"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
    delete:
      summary: Deletes a user.
      responses: 
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully.
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
  "/users/{user_id}/token":
    post:
      summary: Generate a link token for authentication in subsequent steps to a unique user ID.
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: ID of the user to get
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserToken"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
  "/users/{user_id}/accounts":
    post:
      summary: Creates an account for the user e.g. a Xero account
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: ID of the user to create an account for
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Accounts"
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AccountsResult"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
    get:
      summary: Returns all accounts for the user (e.g. Xero accounts)
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: ID of the user to get accounts for
        - name: orederd_by
          in: query
          description: The field of the user to order by
          required: false
          schema:
            type: string
            enum: [payroll_provider, user_name, created_at]
        - name: offset
          in: query
          description: The offset to start at
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 0
        - name: limit
          in: query
          description: The number of items to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    "$ref": "#/components/schemas/Paginatioin"
                  accounts:
                    type: array
                    items:
                      "$ref": "#/components/schemas/AccountsResult"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
  "/users/{user_id}/accounts/{account_id}":
    delete:
      summary: Deletes an account for the user (e.g. a Xero account)
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: ID of the user to delete an account for
        - in: path
          name: account_id
          schema:
            type: string
          required: true
          description: ID of the account to delete
      responses: 
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Account deleted successfully.
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
  "/users/{user_id}/accounts/entries/connections":
    post:
      summary: Connects a user account to a payroll provider
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: ID of the user to connect an account for
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payroll_provider:
                  type: string
                  description: The payroll provider to use
                  example: quickbooks
                user_name:
                  type: string
                  description: The login of the user
                  example: john.smith@gmail.com
                password: 
                  type: string
                  description: The password of the user
                  example: very-secret-password
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PayrollData"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
  "/users/{user_id}/accounts/entries/payslips":
    post:
      summary: Fetches payslips for a user account
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: ID of the user to fetch payslips for
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                account_id:
                  type: string
                  description: The id of the account
                  example: 95a0e70b-fe02-4f47-aef9-2efff279df71
                from_date:
                  "$ref": "#/components/schemas/Date"
                to_date:
                  "$ref": "#/components/schemas/Date"
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/PayrollData"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
  "/users/{user_id}/accounts/entries":
    get:
      summary: Returns all entries for a user account
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: ID of the user to get entries for
        - name: orederd_by
          in: query
          description: The field of the user to order by
          required: false
          schema:
            type: string
            enum: [payroll_provider, created_at]
        - name: offset
          in: query
          description: The offset to start at
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 0
        - name: limit
          in: query
          description: The number of items to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    "$ref": "#/components/schemas/Paginatioin"
                  entries:
                    type: array
                    items:
                      "$ref": "#/components/schemas/PayrollData"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
  "/users/{user_id}/accounts/entry/{entry_id}":
    delete:
      summary: Deletes an entry for the user
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: ID of the user to delete an entry for
        - in: path
          name: entry_id
          schema:
            type: string
          required: true
          description: ID of the entry to delete
      responses: 
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Entry deleted successfully.
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
  "/payroll":
    get:
      summary: Returns all plants from the system that the user has access to
      responses:
        '200':
          description: Plant response
          content:
            application/json:
              schema:
                type: object
                items:
                  "$ref": "#/components/schemas/CreatedUser"
        '400':
          description: Unexpected error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
  "/documents/{entry_id}":
    get:
      summary: Returns all documents for a user entry
      parameters:
        - in: path
          name: entry_id
          schema:
            type: string
          required: true
          description: The id of the entry
        - name: document_id
          in: query
          description: The id of the document
          required: false
          schema:
            type: string
        - name: user_id
          in: query
          description: ID of the user to get documents for
          required: false
          schema:
            type: string
        - name: orederd_by
          in: query
          description: The field of the user to order by
          required: false
          schema:
            type: string
            enum: [payroll_provider, created_at]
        - name: offset
          in: query
          description: The offset to start at
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 0
        - name: limit
          in: query
          description: The number of items to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              type: object
              properties: 
                user_id: 
                  type: string
                  description: The id of the user
                  example: 95a0e70b-fe02-4f47-aef9-2efff279df71
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    "$ref": "#/components/schemas/Paginatioin"
                  documents:
                    type: array
                    items:
                      "$ref": "#/components/schemas/PayrollData"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
  "/documents/{user_id}":
    get:
      summary: List all documents for a user.
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: ID of the user to get documents for
        - name: orederd_by
          in: query
          description: The field of the user to order by
          required: false
          schema:
            type: string
            enum: [payroll_provider, created_at]
        - name: offset
          in: query
          description: The offset to start at
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 0
        - name: limit
          in: query
          description: The number of items to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
      requestBody: 
        required: true
        content: 
          application/json: 
            schema: 
              type: object
              properties: 
                user_id: 
                  type: string
                  description: The id of the user
                  example: 95a0e70b-fe02-4f47-aef9-2efff279df71
      responses:
        '200':
          description: Document response
          content:
            application/json:
              schema:
                type: object
                items:
                  "$ref": "#/components/schemas/CreatedUser"
        '400':
          description: Unexpected error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
  "/webhooks":
    post:
      summary: Creates a webhook.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Webhook"
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreatedWebhook"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
    get:
      summary: Lists all the webhooks
      parameters:
        - name: orederd_by
          in: query
          description: The field of the user to order by
          required: false
          schema:
            type: string
            enum: [name, url, created_at]
            default: created_at
            example: name
        - name: offset
          in: query
          description: The offset to start at
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 0
        - name: limit
          in: query
          description: The number of items to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    "$ref": "#/components/schemas/Paginatioin"
                  users:
                    type: array
                    items:
                      "$ref": "#/components/schemas/CreatedWebhook"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"

  "/webhooks/{webhook_id}":
    get:
      summary: Returns a webhook.
      parameters:
        - in: path
          name: webhook_id
          schema:
            type: string
          required: true
          description: ID of the webhook to get
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/CreatedWebhook"
        '400':
          "$ref": "#/components/responses/BadRequest"
        '401':
          "$ref": "#/components/responses/UnauthorizedApiKey"
components:
  responses:
    UnauthorizedApiKey:
      description: Unauthorized if the X-API-KEY is not provided or is wrong
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Unauthorized"
    BadRequest:
      description: Bad request if one of the required parameters is missing
      content:
        application/json:
          schema:
            "$ref": "#/components/schemas/Error"
  schemas:
    Date:
      type: string
      format: date
      example: 2019-05-17T00:00:00.000Z
    Paginatioin:
      type: object
      required: [offset, limit, count]
      properties:
        offset:
          description: The offset to start at - zero based
          type: integer
          format: int32
          minimum: 1
          default: 0
        limit:
          type: integer
          format: int32
          minimum: 1
          maximum: 100
          default: 20
        oredered_by:
          type: string
          example: name
        count:
          type: integer
          format: int32
          minimum: 0
    User:
      required: [name, email]
      type: object
      properties:
        user_id:
          description: Optionl Id of the user. If not passed, it will be generated.
          type: string
          example: 95a0e70b-fe02-4f47-aef9-2efff279df71
        name:
          description: The full name of the user.
          type: string
          example: John Smith
        email:
          description: The email of the user.
          type: string
          format: email
          example: john.smith@company.com
    CreatedUser:
      allOf:
      - "$ref": "#/components/schemas/User"
      - required: [user_id, created_at]
        properties:
          created_at:
            "$ref": "#/components/schemas/Date"
    UserToken:
      type: object
      required: [token, created_at]
      properties:
        token:
          type: string
          description: The token to be used in subsequent requests
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiOTVhMGU3MGItZmUwMi00ZjQ3LWFlZjktMmVmZmYyNzlkZjcxIiwiaWF0IjoxNTE2MjM5MDIyfQ.4S5J
        created_at:
            "$ref": "#/components/schemas/Date"
    Accounts:
      type: object
      required: [payroll_provider, user_name, password]
      properties:
        payroll_provider:
          type: string
          description: The payroll provider to use
          example: quickbooks
        user_name:
          type: string
          description: The login of the user
          example: john.smith@company.com
        password:
          type: string
          description: The password of the user
          example: very-secret-password
    AccountsResult:
      type: object
      required: [payroll_provider, user_name, created_at, account_id]
      properties:
        account_id:
          type: string
          description: The id of the account
          example: 95a0e70b-fe02-4f47-aef9-2efff279df71
        payroll_provider:
          type: string
          description: The payroll provider to use
          example: quickbooks
        user_name:
          type: string
          description: The login of the user
          example: john.smith@company.com
        created_at:
            "$ref": "#/components/schemas/Date"
    PayrollData:
      type: object
      properties:
        user_id:
          type: string
          description: The id of the user
          example: 95a0e70b-fe02-4f47-aef9-2efff279df71
        entry_id:
          type: string
          description: The id of the entry
          example: 95a0e70b-fe02-4f47-aef9-2efff279df71
        created_at:
          "$ref": "#/components/schemas/Date"
        payroll_provider:
          type: string
          description: The payroll provider to use
          example: quickbooks
        number_entries:
          type: integer
          description: The number of entries
          example: 5
        entry:
          type: array
          items:
            type: object
    Webhook:
      type: object
      required: [name, events, url]
      properties:
        name:
          type: string
          description: A unique name of the webhook
          example: user-payroll-submitted
        events:
          type: array
          items:
            type: string
          example: ["user-payroll-submitted", "user-payroll-created"]
        url:
          type: string
          format: url
          example: https://webhooks.company.com
        secret:
          type: string
          description: A secret to sign the body of the webhook as described at "https://docs.goteal.co"
    CreatedWebhook:
      allOf:
      - required: [webhook_id]
        properties:
          webhook_id:
            type: string
            description: The id of the webhook
            example: 95a0e70b-fe02-4f47-aef9-2efff279df71
      - "$ref": "#/components/schemas/Webhook"
      - required: [created_at]
        properties:
          created_at:
            "$ref": "#/components/schemas/Date"
    
    Error:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          description: A message describing the error
          example: The request is missing the required field `name`
    Unauthorized:
      type: object
      properties:
        message:
          type: string
          description: A message describing the error
          example: No X-API-KEY Key header provided or wrong value
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
    bearerAuth:
      type: http
      scheme: bearer
